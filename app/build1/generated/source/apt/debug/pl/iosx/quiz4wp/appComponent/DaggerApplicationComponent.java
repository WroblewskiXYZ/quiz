// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package pl.iosx.quiz4wp.appComponent;

import dagger.MembersInjector;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import pl.iosx.quiz4wp.MainActivity;
import pl.iosx.quiz4wp.MainActivity_MembersInjector;
import pl.iosx.quiz4wp.QuizApp;
import pl.iosx.quiz4wp.QuizApp_MembersInjector;
import pl.iosx.quiz4wp.model.services.ApiManager.APIService;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<QuizApp> applicationProvider;

  private Provider<APIService> provideApiServiceProvider;

  private MembersInjector<QuizApp> quizAppMembersInjector;

  private MembersInjector<MainActivity> mainActivityMembersInjector;

  private DaggerApplicationComponent(Builder builder) {
    assert builder != null;
    initialize(builder);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {

    this.applicationProvider = InstanceFactory.create(builder.application);

    this.provideApiServiceProvider =
        ApiServiceModule_ProvideApiServiceFactory.create(
            builder.apiServiceModule, applicationProvider);

    this.quizAppMembersInjector = QuizApp_MembersInjector.create(provideApiServiceProvider);

    this.mainActivityMembersInjector =
        MainActivity_MembersInjector.create(provideApiServiceProvider);
  }

  @Override
  public void inject(QuizApp quizApp) {
    quizAppMembersInjector.injectMembers(quizApp);
  }

  @Override
  public void inject(MainActivity activity) {
    mainActivityMembersInjector.injectMembers(activity);
  }

  private static final class Builder implements ApplicationComponent.Builder {
    private ApiServiceModule apiServiceModule;

    private QuizApp application;

    @Override
    public ApplicationComponent build() {
      if (apiServiceModule == null) {
        this.apiServiceModule = new ApiServiceModule();
      }
      if (application == null) {
        throw new IllegalStateException(QuizApp.class.getCanonicalName() + " must be set");
      }
      return new DaggerApplicationComponent(this);
    }

    @Override
    public Builder application(QuizApp quizApp) {
      this.application = Preconditions.checkNotNull(quizApp);
      return this;
    }
  }
}
